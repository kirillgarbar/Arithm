{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Arithm Arithm contains an interpreter for the simple programming language mainly designed to compute arithmetic expressions, long arithmetic and non-empty list libraries. Installing You can install the package with dotnet by following this steps: Add a source in your NuGet.config file dotnet nuget add source \"https://nuget.pkg.github.com/kirillgarbar/index.json\" Authorize with your github token paket config add-token \"https://nuget.pkg.github.com/kirillgarbar/index.json\" <token> Install the package dotnet add PROJECT package Arithm --version <version>","title":"Home"},{"location":"#arithm","text":"Arithm contains an interpreter for the simple programming language mainly designed to compute arithmetic expressions, long arithmetic and non-empty list libraries.","title":"Arithm"},{"location":"#installing","text":"You can install the package with dotnet by following this steps: Add a source in your NuGet.config file","title":"Installing"},{"location":"#_1","text":"dotnet nuget add source \"https://nuget.pkg.github.com/kirillgarbar/index.json\" Authorize with your github token","title":""},{"location":"#_2","text":"paket config add-token \"https://nuget.pkg.github.com/kirillgarbar/index.json\" <token> Install the package","title":""},{"location":"#_3","text":"dotnet add PROJECT package Arithm --version <version>","title":""},{"location":"bigint/","text":"BigInt BigInt is a long arithmetic library used in the Arithm Interpeter. Type An instanse of BigInt consists of Sign of <Sign> and Digits of <MyList<int>> . Sign type has only two values - Positive and Negative . MyList<int> consists of integers from 0 to 9 Functions equal (x:BigInt) (y:BigInt) - returns result of \"x = y\" expression getSign (x:BigInt) - returns 1 for positive and -1 for negative numbe\u043a reverseSign (x:BigInt) - changes a sign of a number equalize (x:MyList<int>, y:MyList<int>) - adds zeroes to a begining of one list until their lengths are equal delZeroHead (l:MyList<int>) - deletes all zeroes from the begining of a list addZeroes (c:int) (l:MyList<int>) - adds c zeroes to a begining notLesser (x:MyList<t>) (y:MyList<t>) - returns true if x is not lesser than y lexicographic order manageRemainders (_arg1:MyList<int>) - moves remainders to the next rank(for the digits in decimal system) sumOrSub (x:BigInt) (y:BigInt) (operator:int -> int -> int) - applies a given operator(usually \"+\" or \"-\") to a numbers sum (x:BigInt) (y:BigInt) - returns sum of two numbers sub (x:BigInt) (y:BigInt) - returns a result of subtraction of two numbers mul (x:BigInt) (y:BigInt) - returns a result of multiplication of two numbers divOrRem (x:BigInt) (y:BigInt) - returns a pair of remainder and whole part of division in BigInt type div (x:BigInt) (y:BigInt) - returns a whole part of division rem (x:BigInt) (y:BigInt) - returns a remainder from division power (x:BigInt) (y:BigInt) - returns a result of exponentiation toBinary (x:BigInt) - converts a number to it's binary representation stringToBigInt (n:string) - converts a string to BigInt bigIntToString (n:BigInt) - converts a BigInt to string abs (x:BigInt) - return an absolute value of a number","title":"BigInt"},{"location":"bigint/#bigint","text":"BigInt is a long arithmetic library used in the Arithm Interpeter.","title":"BigInt"},{"location":"bigint/#type","text":"An instanse of BigInt consists of Sign of <Sign> and Digits of <MyList<int>> . Sign type has only two values - Positive and Negative . MyList<int> consists of integers from 0 to 9","title":"Type"},{"location":"bigint/#functions","text":"equal (x:BigInt) (y:BigInt) - returns result of \"x = y\" expression getSign (x:BigInt) - returns 1 for positive and -1 for negative numbe\u043a reverseSign (x:BigInt) - changes a sign of a number equalize (x:MyList<int>, y:MyList<int>) - adds zeroes to a begining of one list until their lengths are equal delZeroHead (l:MyList<int>) - deletes all zeroes from the begining of a list addZeroes (c:int) (l:MyList<int>) - adds c zeroes to a begining notLesser (x:MyList<t>) (y:MyList<t>) - returns true if x is not lesser than y lexicographic order manageRemainders (_arg1:MyList<int>) - moves remainders to the next rank(for the digits in decimal system) sumOrSub (x:BigInt) (y:BigInt) (operator:int -> int -> int) - applies a given operator(usually \"+\" or \"-\") to a numbers sum (x:BigInt) (y:BigInt) - returns sum of two numbers sub (x:BigInt) (y:BigInt) - returns a result of subtraction of two numbers mul (x:BigInt) (y:BigInt) - returns a result of multiplication of two numbers divOrRem (x:BigInt) (y:BigInt) - returns a pair of remainder and whole part of division in BigInt type div (x:BigInt) (y:BigInt) - returns a whole part of division rem (x:BigInt) (y:BigInt) - returns a remainder from division power (x:BigInt) (y:BigInt) - returns a result of exponentiation toBinary (x:BigInt) - converts a number to it's binary representation stringToBigInt (n:string) - converts a string to BigInt bigIntToString (n:BigInt) - converts a BigInt to string abs (x:BigInt) - return an absolute value of a number","title":"Functions"},{"location":"interpreter/","text":"Interpreter Interpreter can be used both for developers and users Developers To interpretate your code, at first you need to create an abstract sytax tree by using the following function Main.parse <string> Then you can run the Interpreter.run <ast> funtion that returns three dictionaries. The first contains values of all variables in AST.Expression format,the second contains variables in string format, the third has only one key - \"print\" with string of result of interpretation. You can also get a dot file which contains a syntax tree by using DrawTree.drawTree <ast> <output file path> Another functions processExpr (vDict:Dictionary<AST.VName,AST.Expression>) (expr:AST.Expression) - return a result of a given expression in BigInt format processStmt (vDict:Dictionary<AST.VName,AST.Expression>) (pDict:Dictionary<string,string>) (stmt:AST.Stmt) - gets an expression from a statement and sets it's value to a dictionaries with variable as a key calculate (ast:AST.Stmt list) - assisting function to compute a result of code with a single statement Example: let x = \"x = 5 print x\" let ast = parse x let _, _, pDict = Interpreter.run ast printfn \"%s\" pDict.[\"print\"] Given code prints \"5\" into console Users There are only four console commands in Arithm --inputfile <file path> - enter a file with code --inputstring <string> - enter a string with code --compute - return the result of interpretation of the code --todot <file path> - return dot code of syntax tree to the given file Just run \"Arithm.exe\" from console with given commands","title":"Interpreter"},{"location":"interpreter/#interpreter","text":"Interpreter can be used both for developers and users","title":"Interpreter"},{"location":"interpreter/#developers","text":"To interpretate your code, at first you need to create an abstract sytax tree by using the following function Main.parse <string> Then you can run the Interpreter.run <ast> funtion that returns three dictionaries. The first contains values of all variables in AST.Expression format,the second contains variables in string format, the third has only one key - \"print\" with string of result of interpretation. You can also get a dot file which contains a syntax tree by using DrawTree.drawTree <ast> <output file path>","title":"Developers"},{"location":"interpreter/#another-functions","text":"processExpr (vDict:Dictionary<AST.VName,AST.Expression>) (expr:AST.Expression) - return a result of a given expression in BigInt format processStmt (vDict:Dictionary<AST.VName,AST.Expression>) (pDict:Dictionary<string,string>) (stmt:AST.Stmt) - gets an expression from a statement and sets it's value to a dictionaries with variable as a key calculate (ast:AST.Stmt list) - assisting function to compute a result of code with a single statement","title":"Another functions"},{"location":"interpreter/#example","text":"","title":"Example:"},{"location":"interpreter/#_1","text":"let x = \"x = 5 print x\" let ast = parse x let _, _, pDict = Interpreter.run ast printfn \"%s\" pDict.[\"print\"] Given code prints \"5\" into console","title":""},{"location":"interpreter/#users","text":"There are only four console commands in Arithm --inputfile <file path> - enter a file with code --inputstring <string> - enter a string with code --compute - return the result of interpretation of the code --todot <file path> - return dot code of syntax tree to the given file Just run \"Arithm.exe\" from console with given commands","title":"Users"},{"location":"lang/","text":"Language guide Arithm uses simple programming language to define complex arithmetic expressions. Grammar Code consists of statements with expressions and variable's names associated with them. Each arithmetic expression is defined as variable which can be used in other expressions. Value of a variable can be printed in console Statements There are only two statements supported in this language: print <vname> <vname> = <expression> print prints a result of arithmetic expression corresponding to a given variable and the other one defines a variable <vname> starts with a Latin character, which can be followed by numbers or other letters <expression> consists of numbers, other variables and arithmetic operators such as +, -, *, /, %, ^, ~, (, ), | Expressions Num of <BigInt> NVar of <VName> Sum of <Expression * Expression> Sub of <Expression * Expression> Mul of <Expression * Expression> Div of <Expression * Expression> Rem of <Expression * Expression> Pow of <Expression * Expression> Bin of <Expression> Abs of <Expression> Existing of NVar expression means that a variable can be used in expressions. Another expressions are self-exlanatory Operators This is a list of available operators and corresponding expressions: + - sum; Sum - - subtract; also acts as unary minus if immediatly followed by number Sub * - multiply Mul / - integer division Div % - remainder division Rem ^ - power Pow ~ - converts a number to its binary representation Bin ( , ) - brackets to control operation priority | - acts as brackets while returning an absolute value of expression Abs Code example x = |12 - 7 * 8| / -3 y = 8 - x print y All code can be written in a single string","title":"Language guide"},{"location":"lang/#language-guide","text":"Arithm uses simple programming language to define complex arithmetic expressions.","title":"Language guide"},{"location":"lang/#grammar","text":"Code consists of statements with expressions and variable's names associated with them. Each arithmetic expression is defined as variable which can be used in other expressions. Value of a variable can be printed in console","title":"Grammar"},{"location":"lang/#statements","text":"There are only two statements supported in this language: print <vname> <vname> = <expression> print prints a result of arithmetic expression corresponding to a given variable and the other one defines a variable <vname> starts with a Latin character, which can be followed by numbers or other letters <expression> consists of numbers, other variables and arithmetic operators such as +, -, *, /, %, ^, ~, (, ), |","title":"Statements"},{"location":"lang/#expressions","text":"Num of <BigInt> NVar of <VName> Sum of <Expression * Expression> Sub of <Expression * Expression> Mul of <Expression * Expression> Div of <Expression * Expression> Rem of <Expression * Expression> Pow of <Expression * Expression> Bin of <Expression> Abs of <Expression> Existing of NVar expression means that a variable can be used in expressions. Another expressions are self-exlanatory","title":"Expressions"},{"location":"lang/#operators","text":"This is a list of available operators and corresponding expressions: + - sum; Sum - - subtract; also acts as unary minus if immediatly followed by number Sub * - multiply Mul / - integer division Div % - remainder division Rem ^ - power Pow ~ - converts a number to its binary representation Bin ( , ) - brackets to control operation priority | - acts as brackets while returning an absolute value of expression Abs","title":"Operators"},{"location":"lang/#code-example","text":"x = |12 - 7 * 8| / -3 y = 8 - x print y All code can be written in a single string","title":"Code example"},{"location":"mylist/","text":"MyList MyList is a non-empty list library which is used in a BigInt module. Type MyList is a discriminated union with One of 't or Cons of 't * MyList<t> . That makes MyList a non-empty list Functions head (_arg1:MyList<'t>) - returns a head of a list tail (_arg1:MyList<'t>) - reurns a tail of a list fold (folder:'a -> 'b -> 'a) (acc:'a) (l:MyList<'b>) - changes a sign of a number len (l:MyList<'t>) - returns a length of a list concat (l1:MyList<'t>) (l2:MyList<'t>) - deletes all zeroes from the begining of a list map (mapping:'a -> 'b) (l:MyList<'a>) - returns a list to whose elements the given function has been applied iter (action:'a -> unit) (l:MyList<'a'>) - applies a given function to each element of a list bubbleSort (l:MyList<'t>) - returns a sorted list listToMyList (l:List<'t>) - converts List to MyList myListToList (l:MyList<'t>) - converts MyList to List reverse (x:BigInt) - returns a list with elements in a reversed order map2 (mapping:'a -> 'b) (x:MyList<'a>) (y:MyList<'a>) - returns two list to whose elements the given function has been applied intToMyList (i:int) - converts int to MyList","title":"MyList"},{"location":"mylist/#mylist","text":"MyList is a non-empty list library which is used in a BigInt module.","title":"MyList"},{"location":"mylist/#type","text":"MyList is a discriminated union with One of 't or Cons of 't * MyList<t> . That makes MyList a non-empty list","title":"Type"},{"location":"mylist/#functions","text":"head (_arg1:MyList<'t>) - returns a head of a list tail (_arg1:MyList<'t>) - reurns a tail of a list fold (folder:'a -> 'b -> 'a) (acc:'a) (l:MyList<'b>) - changes a sign of a number len (l:MyList<'t>) - returns a length of a list concat (l1:MyList<'t>) (l2:MyList<'t>) - deletes all zeroes from the begining of a list map (mapping:'a -> 'b) (l:MyList<'a>) - returns a list to whose elements the given function has been applied iter (action:'a -> unit) (l:MyList<'a'>) - applies a given function to each element of a list bubbleSort (l:MyList<'t>) - returns a sorted list listToMyList (l:List<'t>) - converts List to MyList myListToList (l:MyList<'t>) - converts MyList to List reverse (x:BigInt) - returns a list with elements in a reversed order map2 (mapping:'a -> 'b) (x:MyList<'a>) (y:MyList<'a>) - returns two list to whose elements the given function has been applied intToMyList (i:int) - converts int to MyList","title":"Functions"},{"location":"structure/","text":"Project structure This page contains some information about the project's structure Github repository structure Arithm \u251c\u2500\u2500 .config - dotnet tools \u251c\u2500\u2500 .github - GitHub Actions CI setup \u251c\u2500\u2500 docs - site with documentation \u251c\u2500\u2500 docsSrc - documentation files in .md format \u251c\u2500\u2500 src - main code of the project \u2502 \u2514\u2500\u2500 Arithm - Interpreter, MyList and BigInt libraries \u251c\u2500\u2500 tests - tests \u2502 \u2514\u2500\u2500 Arithm.tests - tests for all modules \u251c\u2500\u2500 fsharplint.json - linter config \u2514\u2500\u2500 Arithm.sln - main solution file Module dependencies","title":"Structure"},{"location":"structure/#project-structure","text":"This page contains some information about the project's structure","title":"Project structure"},{"location":"structure/#github-repository-structure","text":"","title":"Github repository structure"},{"location":"structure/#_1","text":"Arithm \u251c\u2500\u2500 .config - dotnet tools \u251c\u2500\u2500 .github - GitHub Actions CI setup \u251c\u2500\u2500 docs - site with documentation \u251c\u2500\u2500 docsSrc - documentation files in .md format \u251c\u2500\u2500 src - main code of the project \u2502 \u2514\u2500\u2500 Arithm - Interpreter, MyList and BigInt libraries \u251c\u2500\u2500 tests - tests \u2502 \u2514\u2500\u2500 Arithm.tests - tests for all modules \u251c\u2500\u2500 fsharplint.json - linter config \u2514\u2500\u2500 Arithm.sln - main solution file","title":""},{"location":"structure/#module-dependencies","text":"","title":"Module dependencies"}]}