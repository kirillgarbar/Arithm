{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Arithm Arithm is a library which contains an interpreter for the simple programming language mainly designed to compute arithmetic expressions. Installing You can install the package with paket by following this steps: If there is no paket.dependencies file in your project directory, create one by using folowwing command paket init Then add this source to your paket.dependencies file source https://nuget.pkg.github.com/kirillgarbar/index.json Authorize with your github token paket config add-token source https://nuget.pkg.github.com/kirillgarbar/index.json <token> Install the package dotnet add PROJECT package Arithm --version 1.0.0","title":"Home"},{"location":"#arithm","text":"Arithm is a library which contains an interpreter for the simple programming language mainly designed to compute arithmetic expressions.","title":"Arithm"},{"location":"#installing","text":"You can install the package with paket by following this steps: If there is no paket.dependencies file in your project directory, create one by using folowwing command","title":"Installing"},{"location":"#_1","text":"paket init Then add this source to your paket.dependencies file","title":""},{"location":"#_2","text":"source https://nuget.pkg.github.com/kirillgarbar/index.json Authorize with your github token","title":""},{"location":"#_3","text":"paket config add-token source https://nuget.pkg.github.com/kirillgarbar/index.json <token> Install the package","title":""},{"location":"#_4","text":"dotnet add PROJECT package Arithm --version 1.0.0","title":""},{"location":"lang/","text":"Language guide RuFS uses simple programming language to define complex arithmetic expressions. Code structure Each arithmetic expression is defined as variable which can be used in other expressions. Result of each expression can be printed in console Defining an expression Variables are declared by this construction let <vname> = <expression> <vname> starts with a Latin character, which can be followed by numbers or other letters <expression> consists of numbers, other variables and arithmetic operators such as +, -, *, /, %, ^, ~, (, ), | Operators + - sum - - subtract; also acts as unary minus if immediatly followed by number * - multiply / - integer division % - remainder division ^ - power ~ - converts a number to its binary representation ( , ) - brackets to control operation priority | - acts as brackets while returning an absolute value of expression Functions The only function supported in this language is print <vname> which prints a result of arithmetic expression corresponding to a given variable Code example let x = |12 - 7 * 8| / -3 let y = 8 - x print y All code can be written in a single string","title":"Language guide"},{"location":"lang/#language-guide","text":"RuFS uses simple programming language to define complex arithmetic expressions.","title":"Language guide"},{"location":"lang/#code-structure","text":"Each arithmetic expression is defined as variable which can be used in other expressions. Result of each expression can be printed in console","title":"Code structure"},{"location":"lang/#defining-an-expression","text":"Variables are declared by this construction","title":"Defining an expression"},{"location":"lang/#_1","text":"let <vname> = <expression> <vname> starts with a Latin character, which can be followed by numbers or other letters <expression> consists of numbers, other variables and arithmetic operators such as +, -, *, /, %, ^, ~, (, ), |","title":""},{"location":"lang/#operators","text":"+ - sum - - subtract; also acts as unary minus if immediatly followed by number * - multiply / - integer division % - remainder division ^ - power ~ - converts a number to its binary representation ( , ) - brackets to control operation priority | - acts as brackets while returning an absolute value of expression","title":"Operators"},{"location":"lang/#functions","text":"The only function supported in this language is","title":"Functions"},{"location":"lang/#_2","text":"print <vname> which prints a result of arithmetic expression corresponding to a given variable","title":""},{"location":"lang/#code-example","text":"let x = |12 - 7 * 8| / -3 let y = 8 - x print y All code can be written in a single string","title":"Code example"},{"location":"usage/","text":"Usage Arithm can be used both for developers and users Developers To interpretate your code, at first you need to create an abstract sytax tree by using the following function Main.parse <string of code> Then you can run the Interpreter.run <ast> funtion that returns two dictionaries. First contains values of all variables, second has only one key - \"print\" with string of result of interpretation. You can also get a dot file which contains a syntax tree by using DrawTree.drawTree <ast> <output file path> Example: let x = \"let x = 5 print x\" let ast = parse x let _, pDict = Interpreter.run ast printfn \"%s\" pDict.[\"print\"] Given code prints \"5\" into console Users There are only four console commands in Arithm --inputfile <file path> - enter a file with code --inputstring <string> - enter a string with code --compute - return the result of interpretation of the code --draw <file path> - return dot code of syntax tree to the given file","title":"Usage"},{"location":"usage/#usage","text":"Arithm can be used both for developers and users","title":"Usage"},{"location":"usage/#developers","text":"To interpretate your code, at first you need to create an abstract sytax tree by using the following function","title":"Developers"},{"location":"usage/#_1","text":"Main.parse <string of code> Then you can run the","title":""},{"location":"usage/#_2","text":"Interpreter.run <ast> funtion that returns two dictionaries. First contains values of all variables, second has only one key - \"print\" with string of result of interpretation. You can also get a dot file which contains a syntax tree by using","title":""},{"location":"usage/#_3","text":"DrawTree.drawTree <ast> <output file path> Example:","title":""},{"location":"usage/#_4","text":"let x = \"let x = 5 print x\" let ast = parse x let _, pDict = Interpreter.run ast printfn \"%s\" pDict.[\"print\"] Given code prints \"5\" into console","title":""},{"location":"usage/#users","text":"There are only four console commands in Arithm --inputfile <file path> - enter a file with code --inputstring <string> - enter a string with code --compute - return the result of interpretation of the code --draw <file path> - return dot code of syntax tree to the given file","title":"Users"}]}